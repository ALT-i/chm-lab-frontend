import { app, BrowserWindow, nativeTheme, session} from 'electron';
// import path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}


// set theme to dark mode by default
nativeTheme.themeSource = "dark"; // Set to "system" to use OS default theme

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 1200,
    minWidth: 900,
    minHeight: 600,
    resizable: true, maximizable: true,
    frame: false, autoHideMenuBar: false,
    icon: './assets/img/noun_acetel_logo.ico',
    titleBarStyle: 'hidden',
    titleBarOverlay: true,
    webPreferences: {
      webSecurity: false,
      sandbox: false,
      contextIsolation: false,
      nodeIntegration: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.



// app.on('ready', () => {
//   // Customize protocol to handle static resource.
//   session.defaultSession.protocol.registerFileProtocol('static', (request, callback) => {
//     const fileUrl = request.url.replace('static://', '');
//     const filePath = path.join(app.getAppPath(), '.webpack/renderer', fileUrl);
//     callback(filePath);
//   });

//   createWindow();
// });